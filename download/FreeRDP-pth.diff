diff --git a/client/common/compatibility.c b/client/common/compatibility.c
index 5fdd9ea..dc4b7c8 100644
--- a/client/common/compatibility.c
+++ b/client/common/compatibility.c
@@ -15,6 +15,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
+ * Modifications for PtH support have been marked: 
+ * // PtH modification
+ *
  */
 
 #ifdef HAVE_CONFIG_H
@@ -48,7 +52,7 @@ COMMAND_LINE_ARGUMENT_A old_args[] =
 	{ "K", COMMAND_LINE_VALUE_FLAG, NULL, NULL, NULL, -1, NULL, "do not interfere with window manager bindings" },
 	{ "n", COMMAND_LINE_VALUE_REQUIRED, NULL, NULL, NULL, -1, NULL, "hostname" },
 	{ "o", COMMAND_LINE_VALUE_FLAG, NULL, NULL, NULL, -1, NULL, "console audio" },
-	{ "p", COMMAND_LINE_VALUE_REQUIRED, NULL, NULL, NULL, -1, NULL, "password" },
+	{ "p", COMMAND_LINE_VALUE_REQUIRED, NULL, NULL, NULL, -1, NULL, "password hash" }, // PtH modification
 	{ "s", COMMAND_LINE_VALUE_REQUIRED, NULL, NULL, NULL, -1, NULL, "set startup-shell" },
 	{ "t", COMMAND_LINE_VALUE_REQUIRED, NULL, NULL, NULL, -1, NULL, "alternative port number, default is 3389" },
 	{ "u", COMMAND_LINE_VALUE_REQUIRED, NULL, NULL, NULL, -1, NULL, "username" },
@@ -497,6 +501,12 @@ int freerdp_client_parse_old_command_line_arguments(int argc, char** argv, rdpSe
 			fprintf(stderr, "-p ****** -> /p:******\n");
 			/* Hide the value from 'ps'. */
 			FillMemory(arg->Value, strlen(arg->Value), '*');
+
+			// PtH modification
+			if (strlen(settings->Password) != 32) {
+				printf("ERROR: Password field (-p) should be NT password hash (from SAM).  32 uppercase hex chars.  Quitting.\n");
+				exit(1);
+			}
 		}
 		CommandLineSwitchCase(arg, "s")
 		{
diff --git a/libfreerdp/core/nego.c b/libfreerdp/core/nego.c
index 2e97d05..38d3e2d 100644
--- a/libfreerdp/core/nego.c
+++ b/libfreerdp/core/nego.c
@@ -15,6 +15,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
+ * Modification for PtH support have been marked:
+ * // PtH Modification
+ *
  */
 
 #ifdef HAVE_CONFIG_H
@@ -699,7 +703,12 @@ BOOL nego_send_negotiation_request(rdpNego* nego)
 	{
 		/* RDP_NEG_DATA must be present for TLS and NLA */
 		Stream_Write_UINT8(s, TYPE_RDP_NEG_REQ);
-		Stream_Write_UINT8(s, 0); /* flags, must be set to zero */
+
+		// PtH Modification
+		// Mod #1: flags = 1 => RESTRICTED_ADMIN_MODE_REQUIRED
+		// Stream_Write_UINT8(s, 0); /* flags, must be set to zero */
+		Stream_Write_UINT8(s, 1);
+
 		Stream_Write_UINT16(s, 8); /* RDP_NEG_DATA length (8) */
 		Stream_Write_UINT32(s, nego->requested_protocols); /* requestedProtocols */
 		length += 8;
diff --git a/libfreerdp/core/nla.c b/libfreerdp/core/nla.c
index 2978a2a..812e671 100644
--- a/libfreerdp/core/nla.c
+++ b/libfreerdp/core/nla.c
@@ -15,6 +15,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
+ * Modification for PtH support have been marked:
+ * // PtH Modification
+ *
  */
 
 #ifdef HAVE_CONFIG_H
@@ -924,12 +928,26 @@ void credssp_encode_ts_credentials(rdpCredssp* credssp)
 	wStream* s;
 	int length;
 
+	// PtH Modification
+	// Mod #2 send empty credentials in the TSPasswordCreds structure
+	int DomainLength = credssp->identity.DomainLength;
+	int UserLength = credssp->identity.UserLength;
+	int PasswordLength = credssp->identity.PasswordLength;
+	credssp->identity.DomainLength = 0;
+	credssp->identity.UserLength = 0;
+	credssp->identity.PasswordLength = 0;
+
 	length = ber_sizeof_sequence(credssp_sizeof_ts_credentials(credssp));
 	sspi_SecBufferAlloc(&credssp->ts_credentials, length);
 
 	s = Stream_New(credssp->ts_credentials.pvBuffer, length);
 	credssp_write_ts_credentials(credssp, s);
 
+	// PtH Modification
+	credssp->identity.DomainLength = DomainLength;
+	credssp->identity.UserLength = UserLength;
+	credssp->identity.PasswordLength = PasswordLength;
+
 	Stream_Free(s, FALSE);
 }
 
diff --git a/winpr/libwinpr/sspi/NTLM/ntlm_compute.c b/winpr/libwinpr/sspi/NTLM/ntlm_compute.c
index 5bd0a81..e5fd764 100644
--- a/winpr/libwinpr/sspi/NTLM/ntlm_compute.c
+++ b/winpr/libwinpr/sspi/NTLM/ntlm_compute.c
@@ -15,6 +15,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
+ * Modification for PtH have been marked:
+ * //PtH Modification
+ *
  */
 
 #ifdef HAVE_CONFIG_H
@@ -282,13 +286,44 @@ void ntlm_fetch_ntlm_v2_hash(NTLM_CONTEXT* context, char* hash)
 	SamClose(sam);
 }
 
+// PtH Modification
+// Code taken from: http://stackoverflow.com/questions/16519056/convert-ascii-char-to-hexadecimal-char-in-c
+BYTE*
+hex_decode(BYTE *in, size_t len,BYTE *out)
+{
+        unsigned int i, t, hn, ln;
+
+        for (t = 0,i = 0; i < len; i+=2,++t) {
+
+                hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
+                ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
+
+                out[t] = (hn << 4 ) | ln;
+        }
+
+        return out;
+}
+
 void ntlm_compute_ntlm_v2_hash(NTLM_CONTEXT* context, char* hash)
 {
 	if (context->identity.PasswordLength > 0)
 	{
-		NTOWFv2W((LPWSTR) context->identity.Password, context->identity.PasswordLength * 2,
-				(LPWSTR) context->identity.User, context->identity.UserLength * 2,
-				(LPWSTR) context->identity.Domain, context->identity.DomainLength * 2, (BYTE*) hash);
+		// PtH Modification
+		// Store PasswordHash in "Password" instead of the password
+		//NTOWFv2W((LPWSTR) context->identity.Password, context->identity.PasswordLength * 2,
+		//		(LPWSTR) context->identity.User, context->identity.UserLength * 2,
+		//		(LPWSTR) context->identity.Domain, context->identity.DomainLength * 2, (BYTE*) hash);
+		BYTE samhash_ascii[33];
+		int i;
+		for(i=0;i<32;i++) {
+			samhash_ascii[i] = context->identity.Password[i];
+		}
+		BYTE samhash[16];
+		hex_decode(samhash_ascii,32,samhash);
+		NTOWFv2FromHashW(samhash,
+                        (LPWSTR) context->identity.User, context->identity.UserLength * 2,
+                        (LPWSTR) context->identity.Domain, context->identity.DomainLength * 2,
+                        (BYTE*) hash);
 	}
 	else
 	{
